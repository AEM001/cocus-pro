from __future__ import annotations
from typing import Dict, Optional

def build_point_prompt(instance: str, image_w: int, image_h: int, *, max_total: int = 10, note: Optional[str] = None) -> Dict[str, str]:
    sys_msg = (
        "你是一个伪装目标分割**优化**助手。"
        "请只回复JSON格式，不要其他文字。必须是有效的JSON。"
    )
    n = (note or "").strip()
    user_msg = f"""
目标：'{instance}'（伪装目标）。绿色半透明覆盖层显示当前分割结果；红色矩形是我们操作的扩展ROI区域。图像尺寸（像素）：宽={image_w}，高={image_h}。

--- 先思考（私有的，不要输出） ---
1）分析当前目标的常见形状和边缘、纹理特征（颜色、纹理、边界复杂性），确定在红色矩形框内哪些是目标，在绿色半透明覆盖层内哪些是目标。
2）思考当前目标如何伪装在背景中，在红色矩形框内哪些是无关背景，绿色半透明覆盖层是否包含周围非主体物体
3）必须确定需要加强的==**区域**==缺失了**主体**的什么部分，以及需要去除的区域包含了**什么干扰物**
4）确定==少量区域==，在这个需要加强的区域内**密集**生成正负点提示，绝对不能分散（正点表示加强/补充，负点表示去除的策略）
5）针对确定的少量区域中的某一个，必须**尽可能『多』、『细致』**生成正点和负点，保证精确**区分**
6）确保所有点都在红色矩形框内，且坐标有效
7）每个**区域**不得仅仅生成只有一种类型的点，不得生成少5个点
不要输出或展示这个思考过程。
--- 思考结束 ---


输出要求（严格的JSON格式；不要markdown代码块）：
{{{{
  \"pos_points\": [{{{{\"point_2d\": [x, y], \"why\": \"区域编号（总数必须少）\"}}}}...],
  \"neg_points\": [{{{{\"point_2d\": [x, y], \"why\": \"区域编号（总数必须少）\"}}}}...]
}}}}

点位放置策略（内部指导，不要输出）：
- 点不得分散，必须确定好少于2个关键**区域**，密集生成正负点，清晰的区分主体和背景
- 对于边界较为复杂的初始分割，必须更加专注于某个单独的区域，集中进行雕刻分割

约束条件：
- 每个区域不得仅仅生成只有一种类型的点，不得生成少5个点，最多{max_total}个（正负点总和）。如果不确定，倾向于提供更多点；只有在边界看起来正确时才使用较少的点。
- **严格限制**：所有点必须位于红色矩形框内，框外点位无效且会被忽略。
- 仅使用像素坐标（整数）：0 <= x < {image_w}, 0 <= y < {image_h}
- 保持\"why\"简短（<=15个字）；不要列表；不要编号；不要额外的键
{('额外说明：' + n) if n else ''}
"""
    return {"system": sys_msg, "user": user_msg}
