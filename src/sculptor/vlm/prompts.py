from __future__ import annotations
from typing import Dict, Optional

def build_point_prompt(instance: str, image_w: int, image_h: int, *, max_total: int = 10, note: Optional[str] = None) -> Dict[str, str]:
    sys_msg = (
        "你是一个伪装目标分割助手。"
        "请只回复JSON格式，不要其他文字。必须是有效的JSON。"
    )
    n = (note or "").strip()
    user_msg = f"""
目标：'{instance}'（伪装目标）。绿色半透明覆盖层显示当前分割结果；红色矩形是我们操作的ROI区域。图像尺寸（像素）：宽={image_w}，高={image_h}。

--- 先思考（私有的，不要输出） ---
1）分析当前掩码与真实目标解剖结构和背景干扰物的对比。
2）识别最需要改进边界的关键区域（添加遗漏部分；移除错误区域）。
3）确定一组最能指导优化的修正点；如果已经很好，可以较少。
不要输出或展示这个思考过程。
--- 思考结束 ---

目标：在一次优化步骤中提出精确的修正点来改进掩码。
- 正点（pos）：位于真实目标内部（用于添加/保留）。关注解剖连续性、有机纹理和连贯的身体部位。
- 负点（neg）：位于背景泄漏区域（用于移除）。放置在侵入掩码的相似干扰物上（植物、石头、装备等）。

输出要求（严格的JSON格式；不要markdown代码块）：
{{{{
  \"pos_points\": [{{{{\"point_2d\": [x, y], \"why\": \"简短说明\"}}}}...],
  \"neg_points\": [{{{{\"point_2d\": [x, y], \"why\": \"简短说明\"}}}}...]
}}}}

点位放置策略（内部指导，不要输出）：
- 密度：优先在错误或不确定的边界段进行密集采样；沿着细长的过渡区域放置多个点以稳健地引导轮廓。
- 分布：覆盖不同的错误区域；避免重复重叠，同时确保轮廓附近的连续覆盖。
- 覆盖：沿着头部、躯干、尾部/附肢等可见轮廓采样正点；在最显著的泄漏处放置负点。
- 生物学优先：优先考虑结构线索（形状连续性、鳍/附肢）而非仅基于颜色的相似性。
- 鲁棒性：避开图像边界；避免重叠点；确保坐标有效。

约束条件：
- 优先提供尽可能多有意义的点，最多{max_total}个（正负点总和）。如果不确定，倾向于提供更多点；只有在边界看起来正确时才使用较少的点。
- 仅使用像素坐标（整数）：0 <= x < {image_w}, 0 <= y < {image_h}
- 保持\"why\"简短（<=15个字）；不要列表；不要编号；不要额外的键
{('额外说明：' + n) if n else ''}
"""
    return {"system": sys_msg, "user": user_msg}
